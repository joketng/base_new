package com.jointem.dbhelper;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO2".
*/
public class UserInfo2Dao extends AbstractDao<UserInfo2, String> {

    public static final String TABLENAME = "USER_INFO2";

    /**
     * Properties of entity UserInfo2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mobile = new Property(0, String.class, "mobile", true, "MOBILE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Token = new Property(2, String.class, "token", false, "TOKEN");
        public final static Property CityCode = new Property(3, String.class, "cityCode", false, "CITY_CODE");
        public final static Property DriverId = new Property(4, String.class, "driverId", false, "DRIVER_ID");
        public final static Property RefreshToken = new Property(5, String.class, "refreshToken", false, "REFRESH_TOKEN");
        public final static Property DriverApproveStatus = new Property(6, String.class, "driverApproveStatus", false, "DRIVER_APPROVE_STATUS");
        public final static Property DriverType = new Property(7, String.class, "driverType", false, "DRIVER_TYPE");
    }


    public UserInfo2Dao(DaoConfig config) {
        super(config);
    }
    
    public UserInfo2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO2\" (" + //
                "\"MOBILE\" TEXT PRIMARY KEY NOT NULL ," + // 0: mobile
                "\"NAME\" TEXT," + // 1: name
                "\"TOKEN\" TEXT," + // 2: token
                "\"CITY_CODE\" TEXT," + // 3: cityCode
                "\"DRIVER_ID\" TEXT," + // 4: driverId
                "\"REFRESH_TOKEN\" TEXT," + // 5: refreshToken
                "\"DRIVER_APPROVE_STATUS\" TEXT," + // 6: driverApproveStatus
                "\"DRIVER_TYPE\" TEXT);"); // 7: driverType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo2 entity) {
        stmt.clearBindings();
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(1, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(4, cityCode);
        }
 
        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(5, driverId);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(6, refreshToken);
        }
 
        String driverApproveStatus = entity.getDriverApproveStatus();
        if (driverApproveStatus != null) {
            stmt.bindString(7, driverApproveStatus);
        }
 
        String driverType = entity.getDriverType();
        if (driverType != null) {
            stmt.bindString(8, driverType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo2 entity) {
        stmt.clearBindings();
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(1, mobile);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(3, token);
        }
 
        String cityCode = entity.getCityCode();
        if (cityCode != null) {
            stmt.bindString(4, cityCode);
        }
 
        String driverId = entity.getDriverId();
        if (driverId != null) {
            stmt.bindString(5, driverId);
        }
 
        String refreshToken = entity.getRefreshToken();
        if (refreshToken != null) {
            stmt.bindString(6, refreshToken);
        }
 
        String driverApproveStatus = entity.getDriverApproveStatus();
        if (driverApproveStatus != null) {
            stmt.bindString(7, driverApproveStatus);
        }
 
        String driverType = entity.getDriverType();
        if (driverType != null) {
            stmt.bindString(8, driverType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfo2 readEntity(Cursor cursor, int offset) {
        UserInfo2 entity = new UserInfo2( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mobile
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // token
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // driverId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // refreshToken
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // driverApproveStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // driverType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo2 entity, int offset) {
        entity.setMobile(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setToken(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDriverId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRefreshToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDriverApproveStatus(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDriverType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo2 entity, long rowId) {
        return entity.getMobile();
    }
    
    @Override
    public String getKey(UserInfo2 entity) {
        if(entity != null) {
            return entity.getMobile();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo2 entity) {
        return entity.getMobile() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
